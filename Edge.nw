\section{Edges}
\subsection{Structural Data}
An edge represents a relationship between two nodes, the source and
the destination.
<<Edge data>>=
    NodePtr	source;
    NodePtr	dest;
@ %def source dest
<<default Edge constructor>>=
    source = dest = nil;
<<Edge methods>>=
    NodePtr getSource() const;
    NodePtr getDest() const;
<<Edge inline implementations>>=
INLINE NodePtr Edge::getSource() const
{ return source; }
INLINE NodePtr Edge::getDest() const
{ return dest; }
@ %def getSource getDest
For the purposes of the algorithm, an edge has an orientation that
idicates which direction we are pushing additional flow - i.e.
from child towards parent.  
<<Edge data>>=
    bool	isForward;
<<default Edge constructor>>=
    isForward = true;
@ %def isForward
We can set the orientation in two ways: we can toggle or reverse it,
or we can set the orientation such that the forward direction points
towards either of the endpoints.
<<Edge methods>>=
    void toggleOrientation();
    void setDirectionTo(NodePtr endpoint);
<<Edge inline implementations>>=
INLINE void Edge::toggleOrientation()
{ isForward = isForward ? false : true; }
INLINE void Edge::setDirectionTo(NodePtr endpoint)
{
    assert(endpoint == source || endpoint == dest);
    isForward = (endpoint == dest) ? true : false;
}
@ %toggleOrientation setDirection
Since the source and destination of the edge are fixed with regard to
the original, forward orientation, we also need a way to get the
current head and tail of the edge - i.e. with respect to the orientation,
the edge goes from the tail to the head.
<<Edge methods>>=
    NodePtr getTail() const;
    NodePtr getHead() const;
<<Edge inline implementations>>=
INLINE NodePtr Edge::getTail() const
{ return (isForward == true) ? source : dest; }
INLINE NodePtr Edge::getHead() const
{ return (isForward == true) ? dest : source; }
@ %def getTail getHead
Regardless of the orientation of the node, given one endpoint we
want to be able to get the other node and ask if an edge is incident
to a given node.
<<Edge methods>>=
    NodePtr getOtherNode(const NodePtr node) const;
    bool isIncident(const NodePtr node) const;
<<Edge inline implementations>>=
INLINE NodePtr Edge::getOtherNode(const NodePtr node) const
{ return (node == source) ? dest : source; }
INLINE bool Edge::isIncident(const NodePtr node) const
{ return ((node == source) || (node == dest)) ? true : false; }
@ %def getOtherNode isIncident
\subsection{Flow Data}
<<Edge data>>=
    FlowAmount	capacity;
    FlowAmount	flow;
<<default Edge constructor>>=
    capacity = flow = 0;
<<Edge methods>>=
    FlowAmount getFlow() const { return flow; }
    FlowAmount getCapacity() const { return capacity; }
@ %def capacity flow getFlow getCapacity
Although the capacity of an edge is fixed during the duration of
the algorithm, the flow varies.  We usually speak of {\em increasing}
the flow, but this is done with respect to the current orientation
of the edge, so it may in fact be reducing the amount of flow if
the current orientation is backwards.
<<Edge methods>>=
public:
    void increaseFlow(FlowAmount amt);
<<Edge inline implementations>>=
INLINE void Edge::increaseFlow(FlowAmount amt)
{ 
    if (isForward) {
	assert((capacity - flow) >= amt);
	flow += amt;
    } else {
	assert(flow >= amt);
	flow -= amt;
    }
}
@ %def increaseFlow
For simplex mergers, we need to be able to decrease the flow on an
arc with respect to its current orientation.  This is pretty 
trivial using [[increaseFlow]].
<<Edge methods>>=
public:
    void decreaseFlow(FlowAmount amt);
<<Edge inline implementations>>=
INLINE void Edge::decreaseFlow(FlowAmount amt)
{ 
    increaseFlow(-amt);
}
@ %def decreaseFlow
Another similar method is used during flow recovery is to reduce the
flow amount regardless of its orientation.  We assume that
the caller has already used [[reductionCapacity]] to check this
edge.
<<Edge methods>>=
    void reduceFlow(FlowAmount amt);
<<Edge inline implementations>>=
INLINE void Edge::reduceFlow(FlowAmount amt)
{ 
    assert(amt <= flow);
    flow -= amt;
}
@ %def reduceFlow
We need to to define the residual
capacity with respect to the current orientation and from one node
to the other.
<<Edge methods>>=
public:
    FlowAmount residCapacity() const;
    FlowAmount residCapacity(const Node& node) const;
<<Edge inline implementations>>=
INLINE FlowAmount Edge::residCapacity() const
{ 
    if (isForward) {
	return capacity - flow;
    } else {
	return flow;
    }
}
INLINE FlowAmount Edge::residCapacity(const Node& node) const
{ 
    if (&node == source) { 
	return capacity - flow;
    } else {
	return flow;
    }
}
@ %def residCapacity
During flow recovery, we look for path with residual capacity that 
only involve reducing the flow on arcs.  We encounter the edges
as either in or out arcs, so we are looking for capacity with
respect to a certain node.  So, the capacity is either the existing
flow or zero.
<<Edge methods>>=
    FlowAmount reductionCapacity(const Node& fromNode) const;
<<Edge inline implementations>>=
INLINE FlowAmount Edge::reductionCapacity(const Node& fromNode) const
{ 
    if (&fromNode == source) { 
	return flow;
    } else {
	return 0;
    }
}
@ %def reductionCapacity
We need a default constructor because we will be creating an
array of edges in bulk when we know how many of them are
in the graph.
<<Edge methods>>=
    Edge();
<<Edge method implementations>>=
Edge::Edge()
{
    <<default Edge constructor>>
}
@
After constructing an edge, we will need to initialize it.  
The default orientation will be from the source to the destination.
<<Edge methods>>=
    void init(Node& src, Node& dst, FlowAmount cap);
<<Edge method implementations>>=
void Edge::init(Node& src, Node& dst, FlowAmount cap)
{
    source = &src;
    dest = &dst;
    flow = 0;
    isForward = true;
    capacity = cap;
}
@ %def init
We also need to initialize parameteric arcs where the capacity
is defined by two parameters, $a$ and $b$.
<<Edge methods>>=
#ifdef PARAM_SENSE
    void init(Node& src, Node& dst, FlowAmount aParam, double bParam);
#endif /*PARAM_SENSE*/
<<Edge method implementations>>=
#ifdef PARAM_SENSE
void Edge::init(Node& src, Node& dst, FlowAmount _aParam, double _bParam)
{
    source = &src;
    dest = &dst;
    flow = 0;
    isForward = true;
    capacity = 0;
    aParam = _aParam;
    bParam = _bParam;
}
#endif /*PARAM_SENSE*/
@ 
At the begining of the algorithm, we need to saturate the
source- and sink-adjacent edges.
<<Edge methods>>=
    FlowAmount saturate();
<<Edge method implementations>>=
FlowAmount Edge::saturate()
{ assert(flow == 0); flow = capacity; return flow; }
@ %def saturate

\subsection{Parametric Flow}
To perform parametric sesnitivity analysis, we will specify the capacity
in terms of a simple, linear function: $c = a + b \lambda$.  
Because our implementation assumes integer flows and capacities,
we will round the capacity function to the nearest integer.
This function
will apply to the arcs our of the source and into the sink.  The
source-adjacent arcs will increase in capacity as a function of $\lambda$
and the sink-adjacent arcs will decrease.

Therefore, we will store the two parameters, $a$ and 
$b$, on the edge, and $\lambda$ will be provided externally.
To simply things, we will conditional compilation (ifdef) rather
than a sub-class.
<<Edge data>>=
#ifdef PARAM_SENSE
    FlowAmount aParam;
    double      bParam;
#endif /*PARAM_SENSE*/
@
We set the initial capacity based on the initial value of lambda.  Because
we take the absolute value of the the capacity, we need to signal the 
caller as to whether the capacity is actually negative.
<<Edge methods>>=
    bool setInitialCapacity(double lambda);
<<Edge method implementations>>=
bool Edge::setInitialCapacity(double lambda)
{
    bool negative = false;
#ifdef PARAM_SENSE
    FlowAmount newCapacity = (FlowAmount)(aParam + bParam * lambda);
    negative = (newCapacity < 0) ? true : false;
    capacity = iabs(newCapacity);
#endif /*PARAM_SENSE*/

    return negative;
}
@ %def setInitialCapacity
<<Edge header include files>>=
#include <math.h>
@
Given a new value for $\lambda$, we need to update the arc capacity.
This method is actually specific to the formulation used in the mining
problem.  In particular, sink-adjacent nodes have negative weights, but
the arc between them and the sink uses the absolute value of the capacity.
Furthermore, as $\lambda$ increases, the block value can change from
negative to positive.  In the formulation, we need to know when this
happens so we can move the node from the sink to the source.

Therefore, to provide all this support, we have two input parameters (the
old and new lambda values) and two output paramters (the amount of change
and whether we changed sign).  We use the old lambda to compute the current
capacity with its real sign (not absolute valued).  Then we can compute
the new capacity with the new lambda, taking the absolute value if necessary.
<<Edge methods>>=
    bool increaseLambda(double oldLambda, double newLambda, FlowAmount& delta);
<<Edge inline implementations>>=
INLINE bool Edge::increaseLambda(double oldLambda, 
                                    double newLambda, FlowAmount& delta)
{
    assert(newLambda >= oldLambda);
    bool crossedZero = false;
#ifdef PARAM_SENSE
    FlowAmount oldCapacity  = (FlowAmount)(aParam + bParam * oldLambda);
    FlowAmount newCapacity  = (FlowAmount)(aParam + bParam * newLambda);
    delta = newCapacity - oldCapacity;
    capacity = iabs(newCapacity);
    crossedZero = ((oldCapacity < 0) && (newCapacity >= 0)) ? true : false;
#endif /*PARAM_SENSE*/

    return crossedZero;
}
@ %def increaseLambda
When we increase the capacity of an arc into the sink above zero, we move the
arc to the source.  This involves changing the source and destination.
We assume that [[increaseLambda]] has already established the new, positive
capacity.
<<Edge methods>>=
    void reInit(Node& src, Node& dst);
<<Edge method implementations>>=
void Edge::reInit(Node& src, Node& dst)
{
    assert((source == &dst) || (dest == &src));	  // should be: (v,t) <--> (s,v)
    source = &src;
    dest = &dst;
    flow = 0;
    isForward = true;
}
@ %def reInit
For general parametric analysis, we need to set the capacity to a new
arbitrary value.  If the arc was saturated to begin with, we keep it
saturated by increasing the flow amount.  If the new capacity is less than
the flow amount, we reduce the flow amount.  We always return the amount
of adjustment to the flow.
<<Edge methods>>=
    FlowAmount adjustCapacity(FlowAmount newCap);
<<Edge inline implementations>>=
INLINE FlowAmount Edge::adjustCapacity(FlowAmount newCap)
{
    assert(newCap >= 0);
    if (capacity == newCap) {
	return 0;
    }

    FlowAmount delta = 0;
    if ((flow == capacity) && (flow > 0)) {
	// already saturated
	delta = newCap - capacity;
	flow = newCap;
    } else {
	if (flow > newCap) {
	    // need to reduce flow - arc is saturate at new capacity
	    delta = newCap - flow;
	    flow = newCap;
	}
    }
    capacity = newCap;
    assert((flow >= 0) && (flow <= capacity));
    return delta;
}
@ %def adjustCapacity
\subsection{Miscellaneous Functions}
We need a way to print the contents of an edge to an output stream,
mostly for debugging.
<<C++ overhead>>=
    friend ostream& operator<<(ostream& out, const Edge& edge);
<<Edge method implementations>>=
ostream& operator<<(ostream& out, const Edge& edge)
{
    out << "(" << &edge << "): ";
    if (edge.isForward == true) {
	out << edge.source->getId() << "(src) --> " 
	    << edge.dest->getId() << "(dest)";
    } else {
	out << edge.dest->getId() << "(dest) --> "
	    << edge.source->getId() << "(src)";
    }
    return out << " [" << edge.flow << "," << edge.capacity << "]";
}
<<Edge header include files>>=
#include <iosfwd>
@
We also need to print the flow data in Dimacs format.  Since we
already used the insertion operator, we'll just define a `normal'
method.
<<Edge methods>>=
    ostream& writeFlow(ostream& out);
<<Edge method implementations>>=
ostream& Edge::writeFlow(ostream& out)
{ 
    return out << "f " 
	       << setw(6) << source->getId() << " "
	       << setw(6) << dest->getId() << " "
	       << setw(6) << flow;
}
@ %def writeFlow
Here is a simple method that writes the arc out in Dimacs problem instance
format (i.e. .max format) with the source, destination and capacity.
<<Edge methods>>=
    ostream& writeArcInstance(ostream& out);
<<Edge method implementations>>=
ostream& Edge::writeArcInstance(ostream& out)
{ 
    return out << "a  " 
	       << setw(6) << source->getId() << " "
	       << setw(6) << dest->getId() << " "
	       << setw(6) << capacity;
}
@ %def writeArcInstance
Here's another debugging function that just validates that a given
edge is in fact and edge between two specified nodes.  We don't care
which is the source or destination.  If the edge or nodes are not 
valid, we return false so that the caller can throw an assertion 
failure.
<<Edge methods>>=
    bool validateEdge(Node& node1, Node& node2);
<<Edge method implementations>>=
bool Edge::validateEdge(Node& node1, Node& node2)
{
    bool result = false;
    if (source == &node1) {
	result = (dest == &node2) ? true : false;
    } else {
	result = (dest == &node1) ? true : false;
    }

    return result;
}
@ %def validateEdge
\subsection{File Boiler Plate}
We start with the boiler-plate implementation file. 
<<*>>=
// This C++ code was generated by noweb from the corresponding .nw file
#include "Edge.h"
#include "Node.h"
#include <iostream>
#include <iomanip>
using namespace std;

<<Edge method implementations>>
@
Through magic of the C preprocessor and the macro-like facilities
of {\em noweb}, we can easily define the inline functions
out-of-line to allow us to collect better profile information - 
i.e. collect data on the inline functions that would otherwise
not show up in the function call traces of the profiler.
<<*>>=
#ifndef INLINE_EDGE
#define INLINE /*inline*/
<<Edge inline implementations>>
#undef INLINE 
#endif /*INLINE_EDGE*/
@
The header defines the [[Edge]] class, its member functions, member
data, and inline functions.  Again, we have more boiler-plate.
<<header>>=
// This C++ code was generated by noweb from the corresponding .nw file
#ifndef EDGE_H
#define EDGE_H
#include "types.h"
#include "debug.h"
<<Edge header include files>>
using namespace std;

class Edge 
{
public:
    <<Edge methods>>
    <<C++ overhead>>
private:
    <<Edge data>>
};
@ %def Edge
In case we want the inline functions to really be inlined, we
also define them here in the header file.
<<header>>=
#ifdef INLINE_EDGE
#define INLINE inline
<<Edge inline implementations>>
#undef INLINE 
#endif /*INLINE_EDGE*/

#endif /*EDGE_H*/
