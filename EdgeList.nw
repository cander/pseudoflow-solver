\subsection{Lists of Edges}
To represent the original graph, we need a list of the neighbors
of a node.  To represent a tree, we need a list of the children
Nodes.  However, as we scan for merger arcs or rehang the tree,
we need more than just a pointer to a Node, we also need the
edge that defines the relationship between the two nodes.  Therefore,
we need a list of Edges rather than a list of Nodes.

In principal, the number of edges in the list is
bounded by the degree of the node.  
{\em However, for a child list, during rehang operations we 
will be removing nodes and adding them.  Because we want to
avoid compacting the list (slow) after deleting a node, we 
should allow the list
to be dynamic.  For the moment, we will ignore this and will
revisit it later.}

A list is simply an array of Edge pointers, a capacity, and a current
size.
<<EdgeList data>>=
    EdgePtr*	array;
    int		capacity;
    int		size;
@ Here are constructors and an initialization method for use after a
constructor has already been called (e.g. after allocating an array
of NodeLists).
<<EdgeList methods>>=
public:
    EdgeList();
    EdgeList(int cap);
    void init(int cap);
<<EdgeList inline implementations>>=
INLINE EdgeList::EdgeList()
{ array = nil; capacity = size = 0; }
INLINE EdgeList::EdgeList(int cap) : array(nil)
{ init(cap); }
<<EdgeList method implementations>>=
void EdgeList::init(int cap)
{ 
    delete array; 
    array = new EdgePtr[cap]; 
    capacity = cap; size = 0;
    for (int i = 0; i < cap; i++) {
	array[i] = nil;
    }
    beginIteration();
}
@
The point of the list is to store items, so we need a way to add elements
to the list.  The simplist is to add an element to the end of the list.
<<EdgeList methods>>=
    void appendEdge(EdgePtr edgep);
<<EdgeList method implementations>>=
void EdgeList::appendEdge(EdgePtr edgep)
{
    if (size == capacity) {
	compactList();
    }
    assert((array != nil) && (size < capacity));
    array[size] = edgep;
    size++;
}
@ %def appendEdge
Sometimes we can end up with a number of holes in the list (possibly
the whole list) and we need to compact the list to move the holes
to the end.  In general we try to avoid doing this often (e.g. 
everytime we remove an element), but we have found cases where we have
no choice.
<<EdgeList methods>>=
    void compactList();
<<EdgeList method implementations>>=
void EdgeList::compactList()
{
    int hole;
    <<search for first hole>>
    int nonHole;
    <<search for first non-hole>>
    <<check for big hole at end>>

    while (nonHole < size) {
	<<copy from non-hole to hole>>
	<<advance hole and nonHole>>
    }
    if (currentIndex >= size) {
	currentIndex = hole;
    }
    size = hole;
}
@ %def compactList
It's pretty easy to find a hole.  It had better be before the end of the
list.  Otherwise, the list is full, and there's nothing we can do about it.
<<search for first hole>>=
    for (hole = 0; hole < size; hole++) {
	if (array[hole] == nil) {
	    break;
	}
    }
    assert(hole < size);
@ Similarly, it's easy to find a non-hole after the hole.  It's OK if it runs
past the end of the list.
<<search for first non-hole>>=
    for (nonHole = hole + 1; nonHole < size; nonHole++) {
	if (array[nonHole] != nil) {
	    break;
	}
    }
@ After searching for the first hole and non-hole, if we didn't find a non-hole,
there are two possibilites: the list is empty or it contains some elements
followed by all empty slots to the end of the list.  If the list contains
any elements, the index of the first hole equals size of the list.
Either way, we don't have to copy anything around and we are done.
<<check for big hole at end>>=
    if (nonHole >= size) {
	if (hole == 0) {
	    currentIndex = size = 0;
	} else {
	    size = hole;
	    if (currentIndex > hole) {
		 currentIndex = hole;
	    }
	}
	return;
    }
@ When we have a pointer to the hole and non-hole, we can copy one element 
from into the hole.
<<copy from non-hole to hole>>=
    array[hole] = array[nonHole];
    array[nonHole] = nil;
@ If the current index is between the hole and the non-hole, it should point
at the hole (which just got filled in).
<<copy from non-hole to hole>>=
    if ((currentIndex > hole) && (currentIndex <= nonHole)) {
	currentIndex = hole;
    }
@ Now, we know the next element after the hole is the next hole.  Then we need
to search for the next non-hole.
<<advance hole and nonHole>>=
    hole++;
    assert((hole < size) && (array[hole] == nil));
    nonHole++;
    while ((nonHole < size) && (array[nonHole] == nil)) {
	nonHole++;
    }
@ 
We need methods to iterate over these lists of edges.  We have no
requirement to support multiple simultaneous iterations, so we can
implement the functions and the iteration state directly on the
edge list class (\{em someday using STL would make sense).
The methods are pretty straightforward.
<<EdgeList methods>>=
    void beginIteration();
    bool hasMoreElements();
    EdgePtr getCurrentElement();
    void advanceToNextElement();
@ 
With this simple interface, we only need to keep track of
the current index into the array to implement a cursor, 
and begining the iteration is trivial.
<<EdgeList data>>=
    int currentIndex;
<<EdgeList inline implementations>>=
INLINE void EdgeList::beginIteration()
{ currentIndex = 0; }
@ %def currentIndex beginIteration
Because we allow `holes' to exist within a childlist, the code
for the other methods needs to be prepared to skip over
holes.  So, we add a method to skip over any holes begining
at the current position.
It will either leave the cursor pointing to
the first non-hole or the end of the array.
<<EdgeList internal methods>>=
    void skipHoles();
<<EdgeList inline implementations>>=
INLINE void EdgeList::skipHoles()
{
    while ((array[currentIndex] == nil) && (currentIndex < size)) {
	currentIndex++;
    }
}
@ %def skipHoles
With [[skipHoles]] in place, the other methods are pretty simple
to implement.  Basically, they use [[skipHoles]] to update the
cursor, and perform their real work.  [[hasMoreElements]] just
tells us if there are any more non-hole elements in the list.
<<EdgeList inline implementations>>=
INLINE bool EdgeList::hasMoreElements()
{
    skipHoles();
    return (currentIndex < size) ? true : false;
}
@ %def hasMoreElements
[[getCurrentElement]] returns the element at the current position.
This should almost never be a hole because callers should
call [[hasMoreElements]] first.  Currently, we raise an assertion
if this happens.  We can fix it later if need be.
<<EdgeList inline implementations>>=
INLINE EdgePtr EdgeList::getCurrentElement()
{
    assert((currentIndex < size) && (array[currentIndex] != nil));
    return array[currentIndex];
}
@ %def getCurrentElement
The [[advanceToNextElement]] moves us to the next non-hole
element unless we're at the end of the array already, in
which case it is a no-op.
<<EdgeList inline implementations>>=
INLINE void EdgeList::advanceToNextElement()
{
    if (currentIndex < size) {
	currentIndex++;
	skipHoles();
    }
}
@ %def advanceToNextElement
While performing rehang operations, a Node needs to remove
the child pointed to by the current cursor.  This is
the cause of holes in the list.  We pass in the value
that we expect to be at the cursor, mostly out of
paranoia.
<<EdgeList methods>>=
    void removeCurrentElement(EdgePtr edgep);
<<EdgeList inline implementations>>=
INLINE void EdgeList::removeCurrentElement(EdgePtr edgep)
{
    assert((currentIndex < size) && (array[currentIndex] == edgep));
    array[currentIndex] = nil;
}
@ %def removeCurrentElement
Similarly, during rehang operations we need to put a Edge into the
list at the current cursor location, which should be a hole.  In
this case, we can just stuff the element in the hole.  The exceptions
are if the list is empty, or if the current element is at the
begining of the list. Another case comes up with pre-order searches
where the size is greater than zero, but the current index is still
zero. In these cases we aren't replacing the current cursor location
but rather appending to the list.

<<EdgeList methods>>=
    void addCurrentElement(EdgePtr edgep);
<<EdgeList inline implementations>>=
INLINE void EdgeList::addCurrentElement(EdgePtr edgep)
{
    if ((size == 0) || (currentIndex == size)) {
	appendEdge(edgep);
    } else if (array[currentIndex] == nil) {
	array[currentIndex] = edgep;
    } else {
	appendEdge(edgep);
    }
}
@ %def addCurrentElement
Another way to add an element to the list is to add it at the first hole
or if there are no holes, to append it.  Currently, we use a brute-force
search for a hole, but in the future, we can speed this by keeping
track of the lowest indexed hole we create.
If this method adds the edge to a hole `behind' the current
index, we do not bother to back up the current index - i.e. we
assume that we don't need to scan what we are adding.

{\em When this is made more efficient, it should be inlined.
     To track the lowest hole, we should init the value to `size'
     and update it upon removing elements.  The toggle for rehang
     might unnecessarily disturb it.  Might want a `second lowest
     hole' member, too?}
<<EdgeList methods>>=
    void addHoleElement(EdgePtr edgep);
<<EdgeList method implementations>>=
void EdgeList::addHoleElement(EdgePtr edgep)
{
    int index = 0;
    while ((array[index] != nil) && (index < capacity)) {
	index++;
    }

    assert(index < capacity);
    array[index] = edgep;
    if (index == size) {
	size++;
    }
}
@ %def addHoleElement
Yet another way to add an element (required by simplex) is to 
add it at or after the current element, or if that doesn't work
add it to a hole.  No matter where we add it, we need to make
sure it gets scanned by the current index. So we might need to
update the current index if we add it to a hole behind the current
index.  It is safe (but a bit inefficient) to back up the
current index in the list.
<<EdgeList methods>>=
    void addAfterCurrent(EdgePtr edgep);
<<EdgeList method implementations>>=
void EdgeList::addAfterCurrent(EdgePtr edgep)
{
    <<add after the current element>>
    <<add before current element and back up>>
}
@ %def addAfterCurrent
First we scan from the current index to the end of the list
looking for a hole.  If we find one, just add the element and
return because we don't need to udpate the index.
<<add after the current element>>=
    for (int index = currentIndex; index < capacity; index++) {
	if (array[index] == nil) {
	    array[index] = edgep;
	    if (index == size) {
		size++;
	    }
	    return;
	}
    }
@ If that failed, we start at the element before the current
index and scan backwards.  If we find a hole, we'll insert the
element and update the current index.
<<add before current element and back up>>=
    for (int index = (currentIndex - 1); index >= 0; index--) {
	if (array[index] == nil) {
	    array[index] = edgep;
	    currentIndex = index;
	    return;
	}
    }
@ If both of those failed, something is seriously wrong;
just throw an assertion violation.
<<add before current element and back up>>=
    assert(false);
@
When a node is begin split from its parent, we need to remove a child
edge which is probably not the current edge.  At the moment, we implement
this via a linear search.  In the future, perhaps we could use a 
hashtable, but it might be difficult to iterate over that given that
a phase can be started and stopped multiple times.
<<EdgeList methods>>=
    void removeElement(EdgePtr edgep);
<<EdgeList inline implementations>>=
INLINE void EdgeList::removeElement(EdgePtr edgep)
{
    if (array[currentIndex] == edgep) {
	array[currentIndex] = nil;
	return;
    } 

    for (int i = 0; i < size; i++) {
	if (array[i] == edgep) {
	    array[i] = nil;
	    <<adjust the list size>>
	    return;
	}
    }
    assert("failed to find edge" == nil);	// force assertion failure
}
@ %def removeElement
One complication is if we remove the last element in the list,
we should shrink the size of the list.  If there are holes
`behind' the last element, we should shrink the list even further.
We should also back up the current element as we go.
<<adjust the list size>>=
    if (i == (size - 1)) {
	size--;
	int endProbe = i - 1;
	while (endProbe >= 0) {
	    if (array[endProbe] == nil) {
		size--;
		endProbe--;
	    } else {
		break;
	    }
	}
	if (currentIndex > size) {
	     currentIndex = size;
	}
    }
@
Here are some direct accessor methods for use during debugging.
These really should be 'hidden' and shared only to [[friends]].
<<EdgeList debug methods>>=
    int getSize() const;
    EdgePtr getElement(int i) const;
<<EdgeList method implementations>>=
int EdgeList::getSize() const
{ return size; }
EdgePtr EdgeList::getElement(int i) const
{
    assert(i < size);
    return array[i];
}
@
\subsubsection{Iterator class}
<<ElIterator public declarations>>=
    ElIterator(EdgeList& l);
<<EdgeList inline implementations>>=
INLINE ElIterator::ElIterator(EdgeList& l) : list(l), position(-1)
{ }
<<ElIterator public declarations>>=
    EdgePtr getNext();
<<EdgeList inline implementations>>=
INLINE EdgePtr ElIterator::getNext()
{
    EdgePtr result = nil;
    while (++position < list.size) {
	if (list.array[position] != nil) {
	    result = list.array[position];
	    break;
	}
    }

    return result;
}
@
\subsubsection{File Boiler Plate}
We start with the boiler-plate implementation file. 
<<*>>=
// This C++ code was generated by noweb from the corresponding .nw file
#include "EdgeList.h"
#include <iostream>
#include <iomanip>
#include <assert.h>

<<EdgeList method implementations>>
@
Through magic of the C preprocessor and the macro-like facilities
of {\em noweb}, we can easily define the inline functions
out-of-line to allow us to collect better profile information - 
i.e. collect data on the inline functions that would otherwise
not show up in the function call traces of the profiler.
<<*>>=
#ifndef INLINE_EDGELIST
#define INLINE /*inline*/
<<EdgeList inline implementations>>
#undef INLINE 
#endif /*INLINE_EDGELIST*/
@
The header defines the [[EdgeList]] class, its member functions, member
data, and inline functions.  Again, we have more boiler-plate.
<<header>>=
// This C++ code was generated by noweb from the corresponding .nw file
#ifndef EDGELIST_H
#define EDGELIST_H
#include "types.h"
#include "debug.h"

class ElIterator;
class EdgeList 
{
    <<EdgeList methods>>
    <<EdgeList debug methods>>
protected:
    <<EdgeList internal methods>>
private:
    <<EdgeList data>>
    friend class ElIterator;
};
@ Here's the declaration for our iterator class.
<<header>>=
class ElIterator
{
    EdgeList& list;
    int position;
public:
    <<ElIterator public declarations>>
private: 
    ElIterator();
};
@ %def EdgeList
In case we want the inline functions to really be inlined, we
also define them here in the header file.
<<header>>=
#ifdef INLINE_EDGELIST
#define INLINE inline
<<EdgeList inline implementations>>
#undef INLINE 
#endif /*INLINE_EDGELIST*/

#endif /*EDGELIST_H*/
